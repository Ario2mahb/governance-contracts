{
  "address": "0xE09E4784C2Dd7B0f2Db5bf9B00E101a4dC8CC9EB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "endpoint_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian_",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidProposalId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "name": "ProposalReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "ReceivePayloadFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxLimit",
          "type": "uint256"
        }
      ],
      "name": "SetMaxDailyReceiveLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldSrcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newSrcChainId",
          "type": "uint16"
        }
      ],
      "name": "SetSrcChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "routeType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTimelock",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTimelock",
          "type": "address"
        }
      ],
      "name": "TimelockAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITimelock[]",
          "name": "timelocks_",
          "type": "address[]"
        }
      ],
      "name": "addTimelocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId_",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId_",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last24HourCommandsReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last24HourReceiveWindowStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProposalReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDailyReceiveLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalTimelocks",
      "outputs": [
        {
          "internalType": "contract ITimelock",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "queued",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "name": "setMaxDailyReceiveLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        }
      ],
      "name": "setSrcChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "srcChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId_",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum OmnichainGovernanceExecutor.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x139f93518842ae2a207bf1a7933e6cb5711722b2d5eb000592afb76519293a67",
  "receipt": {
    "to": null,
    "from": "0x9cc6F5f16498fCEEf4D00A350Bd8F8921D304Dc9",
    "contractAddress": "0xE09E4784C2Dd7B0f2Db5bf9B00E101a4dC8CC9EB",
    "transactionIndex": 1,
    "gasUsed": "3809874",
    "logsBloom": "0x
    "blockHash": "0x4ba8d34733fa85d7aa5d4328444186e86d68499392d5b577b7e56e698b86f6d3",
    "transactionHash": "0x139f93518842ae2a207bf1a7933e6cb5711722b2d5eb000592afb76519293a67",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5341261,
        "transactionHash": "0x139f93518842ae2a207bf1a7933e6cb5711722b2d5eb000592afb76519293a67",
        "address": "0xE09E4784C2Dd7B0f2Db5bf9B00E101a4dC8CC9EB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009cc6f5f16498fceef4d00a350bd8f8921d304dc9"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4ba8d34733fa85d7aa5d4328444186e86d68499392d5b577b7e56e698b86f6d3"
      }
    ],
    "blockNumber": 5341261,
    "cumulativeGasUsed": "3846514",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1", "0x94fa6078b6b8a26f0b6edffbe6501b22a10470fb", 10102],
  "numDeployments": 1,
  "solcInputHash": "c904e41aaaece4740c4bac0b5ae64be5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"endpoint_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidProposalId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"name\":\"ProposalReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"ReceivePayloadFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLimit\",\"type\":\"uint256\"}],\"name\":\"SetMaxDailyReceiveLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldSrcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newSrcChainId\",\"type\":\"uint16\"}],\"name\":\"SetSrcChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"routeType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTimelock\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITimelock[]\",\"name\":\"timelocks_\",\"type\":\"address[]\"}],\"name\":\"addTimelocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId_\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId_\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last24HourCommandsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last24HourReceiveWindowStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposalReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDailyReceiveLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalTimelocks\",\"outputs\":[{\"internalType\":\"contract ITimelock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queued\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setMaxDailyReceiveLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"}],\"name\":\"setSrcChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"srcChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId_\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum OmnichainGovernanceExecutor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"https://github.com/VenusProtocol/governance-contracts#discussion\",\"details\":\"The owner of this contract controls LayerZero configuration. When used in production the owner will be OmnichainExecutor This implementation is non-blocking, meaning the failed messages will not block the future messages from the source. For the blocking behavior, derive the contract from LzApp.\",\"kind\":\"dev\",\"methods\":{\"addTimelocks(address[])\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emits TimelockAdded with old and new timelock and route type.\",\"params\":{\"timelocks_\":\"Array of addresses of all 3 timelocks.\"}},\"cancel(uint256)\":{\"custom:access\":\"Sender must be the guardian.\",\"custom:event\":\"Emits ProposalCanceled with proposal id of the canceled proposal.\",\"params\":{\"proposalId_\":\"Id of proposal that is to be canceled.\"}},\"execute(uint256)\":{\"custom:event\":\"Emits ProposalExecuted with proposal id of executed proposal.\",\"params\":{\"proposalId_\":\"Id of proposal that is to be executed.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"custom:access\":\"Only owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setMaxDailyReceiveLimit(uint256)\":{\"custom:access\":\"Only Owner.\",\"custom:event\":\"Emits SetMaxDailyReceiveLimit with old and new limit\",\"params\":{\"limit_\":\"Number of commands.\"}},\"setSrcChainId(uint16)\":{\"custom:access\":\"Only owner.\",\"custom:event\":\"Emit SetSrcChainId with old and new source id.\",\"params\":{\"srcChainId_\":\"The new source chain id to be set.\"}},\"state(uint256)\":{\"params\":{\"proposalId_\":\"The id of the proposal\"},\"returns\":{\"_0\":\"Proposal state\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"custom:access\":\"Only owner.\"}},\"title\":\"OmnichainGovernanceExecutor\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidProposalId()\":[{\"notice\":\"Thrown when proposal ID is invalid.\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"events\":{\"ProposalCanceled(uint256)\":{\"notice\":\"Emitted when proposal is canceled.\"},\"ProposalExecuted(uint256)\":{\"notice\":\"Emitted when proposal executed.\"},\"ProposalQueued(uint256,uint256)\":{\"notice\":\"Emitted when proposal is queued.\"},\"ProposalReceived(uint256,address[],uint256[],string[],bytes[],uint8)\":{\"notice\":\"Emitted when proposal is received.\"},\"ReceivePayloadFailed(uint16,bytes,uint64,bytes)\":{\"notice\":\"Emitted when proposal failed.\"},\"SetMaxDailyReceiveLimit(uint256,uint256)\":{\"notice\":\"Emitted when the maximum daily limit for receiving command from Binance chain is modified.\"},\"SetSrcChainId(uint16,uint16)\":{\"notice\":\"Emitted when source layerzero endpoint id is updated.\"},\"TimelockAdded(uint8,address,address)\":{\"notice\":\"Emitted when timelock added.\"}},\"kind\":\"user\",\"methods\":{\"GUARDIAN()\":{\"notice\":\"A privileged role that can cancel any proposal.\"},\"addTimelocks(address[])\":{\"notice\":\"Add timelocks to the ProposalTimelocks mapping.\"},\"cancel(uint256)\":{\"notice\":\"Cancels a proposal only if sender is the guardian and proposal is not executed.\"},\"execute(uint256)\":{\"notice\":\"Executes a queued proposal if eta has passed.\"},\"last24HourCommandsReceived()\":{\"notice\":\"Total received commands within the last 24-hour window from Binance chain.\"},\"last24HourReceiveWindowStart()\":{\"notice\":\"Timestamp when the last 24-hour window started from Binance chain.\"},\"lastProposalReceived()\":{\"notice\":\"Last proposal count received.\"},\"maxDailyReceiveLimit()\":{\"notice\":\"Maximum daily limit for receiving commands from Binance chain.\"},\"pause()\":{\"notice\":\"Triggers the paused state of the controller.\"},\"proposalTimelocks(uint256)\":{\"notice\":\"Mapping containing Timelock addresses for each proposal type.\"},\"proposals(uint256)\":{\"notice\":\"The official record of all proposals ever proposed.\"},\"queued(uint256)\":{\"notice\":\"Represents queue state of proposal.\"},\"renounceOwnership()\":{\"notice\":\"Empty implementation of renounce ownership to avoid any mishappening.\"},\"setMaxDailyReceiveLimit(uint256)\":{\"notice\":\"Sets the maximum daily limit for receiving commands.\"},\"setSrcChainId(uint16)\":{\"notice\":\"Update source layerzero endpoint id.\"},\"srcChainId()\":{\"notice\":\"Stores Binance layerzero endpoint id\"},\"state(uint256)\":{\"notice\":\"Gets the state of a proposal\"},\"unpause()\":{\"notice\":\"Triggers the resume state of the controller.\"}},\"notice\":\"Executes the proposal transactions sent from the main chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Cross-chain/OmnichainGovernanceExecutor.sol\":\"OmnichainGovernanceExecutor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x7e64cccdf22a03f513d94960f2145dd801fb5ec88d971de079b5186a9f5e93c4\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n        require(_buf.length >= 4);\\n        uint _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4e52af409b5ec80432292d86fb01906785eb78ac31da3bab4565aabcd6e3e56\",\"license\":\"MIT OR Apache-2.0\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(\\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\\n            \\\"LzApp: invalid source sending contract\\\"\\n        );\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint _nativeFee\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(\\n        uint16 _dstChainId,\\n        uint16 _type,\\n        bytes memory _adapterParams,\\n        uint _extraGas\\n    ) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit + _extraGas, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) {\\n            // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(\\n        uint16 _dstChainId,\\n        uint16 _packetType,\\n        uint _minGas\\n    ) external onlyOwner {\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x309c994bdcf69ad63c6789694a28eb72a773e2d9db58fe572ab2b34a475972ce\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft(),\\n            150,\\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\\n        );\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload,\\n        bytes memory _reason\\n    ) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x612ff1f2a158b7e64e873885b5ff08afa348998fd9005f384d555d643ba7968d\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xab7fcacc672251c850f00c0abd4100df9afcc4ad70b8d331a2fd4cb07acab9f4\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac1966c1229bd4dc36b6c69eeb94a537bd9aa2198d7623b9ba7f8f7dbe79bb4c\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xb4df93aeb0fb46373a4fb728ad2603edc8b9a1577eee8d801768dc115bf96498\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x909eb76841ebd57d8f53686b76b1a09da7bbbbcddb29510c41674d5aa84c713e\",\"license\":\"BSD-3-Clause\"},\"contracts/Cross-chain/BaseOmnichainControllerDest.sol\":{\"content\":\"//  SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.13;\\n\\nimport { NonblockingLzApp } from \\\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\n\\n/**\\n * @title BaseOmnichainControllerDest\\n * @author Venus\\n * @dev This contract is the base for the Omnichain controller destination contract.\\n * It provides functionality related to daily command limits and pausability.\\n * @custom:security-contact https://github.com/VenusProtocol/governance-contracts#discussion\\n */\\n\\nabstract contract BaseOmnichainControllerDest is NonblockingLzApp, Pausable {\\n    /**\\n     * @notice Maximum daily limit for receiving commands from Binance chain.\\n     */\\n    uint256 public maxDailyReceiveLimit;\\n\\n    /**\\n     * @notice Total received commands within the last 24-hour window from Binance chain.\\n     */\\n    uint256 public last24HourCommandsReceived;\\n\\n    /**\\n     * @notice Timestamp when the last 24-hour window started from Binance chain.\\n     */\\n    uint256 public last24HourReceiveWindowStart;\\n\\n    /**\\n     * @notice Emitted when the maximum daily limit for receiving command from Binance chain is modified.\\n     */\\n    event SetMaxDailyReceiveLimit(uint256 oldMaxLimit, uint256 newMaxLimit);\\n\\n    constructor(address endpoint_) NonblockingLzApp(endpoint_) {\\n        ensureNonzeroAddress(endpoint_);\\n    }\\n\\n    /**\\n     * @notice Sets the maximum daily limit for receiving commands.\\n     * @param limit_ Number of commands.\\n     * @custom:access Only Owner.\\n     * @custom:event Emits SetMaxDailyReceiveLimit with old and new limit\\n     */\\n    function setMaxDailyReceiveLimit(uint256 limit_) external onlyOwner {\\n        emit SetMaxDailyReceiveLimit(maxDailyReceiveLimit, limit_);\\n        maxDailyReceiveLimit = limit_;\\n    }\\n\\n    /**\\n     * @notice Triggers the paused state of the controller.\\n     * @custom:access Only owner.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Triggers the resume state of the controller.\\n     * @custom:access Only owner.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Empty implementation of renounce ownership to avoid any mishappening.\\n     */\\n    function renounceOwnership() public override {}\\n\\n    /**\\n     * @notice Check eligibility to receive commands.\\n     * @param noOfCommands_ Number of commands to be received.\\n     */\\n    function _isEligibleToReceive(uint256 noOfCommands_) internal {\\n        uint256 currentBlockTimestamp = block.timestamp;\\n\\n        // Load values for the 24-hour window checks for receiving\\n        uint256 receivedInWindow = last24HourCommandsReceived;\\n\\n        // Check if the time window has changed (more than 24 hours have passed)\\n        if (currentBlockTimestamp - last24HourReceiveWindowStart > 1 days) {\\n            receivedInWindow = noOfCommands_;\\n            last24HourReceiveWindowStart = currentBlockTimestamp;\\n        } else {\\n            receivedInWindow += noOfCommands_;\\n        }\\n\\n        // Revert if the received amount exceeds the daily limit\\n        require(receivedInWindow <= maxDailyReceiveLimit, \\\"Daily Transaction Limit Exceeded\\\");\\n\\n        // Update the received amount for the 24-hour window\\n        last24HourCommandsReceived = receivedInWindow;\\n    }\\n}\\n\",\"keccak256\":\"0x7da103160c9b030108b8636744c8cb276c374c85eb624983d0cf9420e782c244\",\"license\":\"BSD-3-Clause\"},\"contracts/Cross-chain/OmnichainGovernanceExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { BytesLib } from \\\"@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\\\";\\nimport { ExcessivelySafeCall } from \\\"@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\nimport { BaseOmnichainControllerDest } from \\\"./BaseOmnichainControllerDest.sol\\\";\\nimport { ITimelock } from \\\"./interfaces/ITimelock.sol\\\";\\n\\n/**\\n * @title OmnichainGovernanceExecutor\\n * @notice Executes the proposal transactions sent from the main chain\\n * @dev The owner of this contract controls LayerZero configuration. When used in production the owner will be OmnichainExecutor\\n * This implementation is non-blocking, meaning the failed messages will not block the future messages from the source.\\n * For the blocking behavior, derive the contract from LzApp.\\n * @custom:security-contact https://github.com/VenusProtocol/governance-contracts#discussion\\n */\\ncontract OmnichainGovernanceExecutor is ReentrancyGuard, BaseOmnichainControllerDest {\\n    using BytesLib for bytes;\\n    using ExcessivelySafeCall for address;\\n\\n    enum ProposalType {\\n        NORMAL,\\n        FASTTRACK,\\n        CRITICAL\\n    }\\n\\n    struct Proposal {\\n        /** Unique id for looking up a proposal */\\n        uint256 id;\\n        /** The timestamp that the proposal will be available for execution, set once the vote succeeds */\\n        uint256 eta;\\n        /** The ordered list of target addresses for calls to be made */\\n        address[] targets;\\n        /** The ordered list of values (i.e. msg.value) to be passed to the calls to be made */\\n        uint256[] values;\\n        /** The ordered list of function signatures to be called */\\n        string[] signatures;\\n        /** The ordered list of calldata to be passed to each call */\\n        bytes[] calldatas;\\n        /** Flag marking whether the proposal has been canceled */\\n        bool canceled;\\n        /** Flag marking whether the proposal has been executed */\\n        bool executed;\\n        /** The type of the proposal */\\n        uint8 proposalType;\\n    }\\n    /*\\n     * @notice Possible states that a proposal may be in\\n     */\\n    enum ProposalState {\\n        Canceled,\\n        Queued,\\n        Executed\\n    }\\n\\n    /**\\n     * @notice A privileged role that can cancel any proposal.\\n     */\\n    address public immutable GUARDIAN;\\n\\n    /**\\n     * @notice Stores Binance layerzero endpoint id\\n     */\\n    uint16 public srcChainId;\\n\\n    /**\\n     * @notice Last proposal count received.\\n     */\\n    uint256 public lastProposalReceived;\\n\\n    /**\\n     * @notice The official record of all proposals ever proposed.\\n     */\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    /**\\n     * @notice Mapping containing Timelock addresses for each proposal type.\\n     */\\n    mapping(uint256 => ITimelock) public proposalTimelocks;\\n\\n    /**\\n     * @notice Represents queue state of proposal.\\n     */\\n    mapping(uint256 => bool) public queued;\\n\\n    /**\\n     * @notice Emitted when proposal is received.\\n     */\\n    event ProposalReceived(\\n        uint256 indexed proposalId,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint8 proposalType\\n    );\\n\\n    /**\\n     * @notice Emitted when proposal is queued.\\n     */\\n    event ProposalQueued(uint256 indexed id, uint256 eta);\\n\\n    /**\\n     * Emitted when proposal executed.\\n     */\\n    event ProposalExecuted(uint256 indexed id);\\n\\n    /**\\n     * @notice Emitted when proposal failed.\\n     */\\n    event ReceivePayloadFailed(uint16 indexed srcChainId, bytes indexed srcAddress, uint64 nonce, bytes reason);\\n\\n    /**\\n     * @notice Emitted when proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 indexed id);\\n\\n    /**\\n     * @notice Emitted when timelock added.\\n     */\\n    event TimelockAdded(uint8 routeType, address indexed oldTimelock, address indexed newTimelock);\\n\\n    /**\\n     * @notice Emitted when source layerzero endpoint id is updated.\\n     */\\n    event SetSrcChainId(uint16 indexed oldSrcChainId, uint16 indexed newSrcChainId);\\n\\n    /**\\n     * @notice Thrown when proposal ID is invalid.\\n     */\\n    error InvalidProposalId();\\n\\n    constructor(address endpoint_, address guardian_, uint16 srcChainId_) BaseOmnichainControllerDest(endpoint_) {\\n        ensureNonzeroAddress(guardian_);\\n        GUARDIAN = guardian_;\\n        srcChainId = srcChainId_;\\n    }\\n\\n    /**\\n     * @notice Update source layerzero endpoint id.\\n     * @param srcChainId_ The new source chain id to be set.\\n     * @custom:event Emit SetSrcChainId with old and new source id.\\n     * @custom:access Only owner.\\n     */\\n    function setSrcChainId(uint16 srcChainId_) external onlyOwner {\\n        emit SetSrcChainId(srcChainId, srcChainId_);\\n        srcChainId = srcChainId_;\\n    }\\n\\n    /**\\n     * @notice Add timelocks to the ProposalTimelocks mapping.\\n     * @param timelocks_ Array of addresses of all 3 timelocks.\\n     * @custom:access Only owner.\\n     * @custom:event Emits TimelockAdded with old and new timelock and route type.\\n     */\\n    function addTimelocks(ITimelock[] memory timelocks_) external onlyOwner {\\n        uint8 length = uint8(type(ProposalType).max) + 1;\\n        require(\\n            timelocks_.length == length,\\n            \\\"OmnichainGovernanceExecutor::initialize:number of timelocks _should match the number of governance routes\\\"\\n        );\\n        for (uint8 i; i < length; ) {\\n            ensureNonzeroAddress(address(timelocks_[i]));\\n            emit TimelockAdded(i, address(proposalTimelocks[i]), address(timelocks_[i]));\\n            proposalTimelocks[i] = timelocks_[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a queued proposal if eta has passed.\\n     * @param proposalId_ Id of proposal that is to be executed.\\n     * @custom:event Emits ProposalExecuted with proposal id of executed proposal.\\n     */\\n    function execute(uint256 proposalId_) external nonReentrant {\\n        require(\\n            state(proposalId_) == ProposalState.Queued,\\n            \\\"OmnichainGovernanceExecutor::execute: proposal can only be executed if it is queued\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId_];\\n        proposal.executed = true;\\n        ITimelock timelock = proposalTimelocks[proposal.proposalType];\\n        uint256 eta = proposal.eta;\\n        uint256 length = proposal.targets.length;\\n\\n        emit ProposalExecuted(proposalId_);\\n\\n        for (uint256 i; i < length; ) {\\n            timelock.executeTransaction(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                eta\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancels a proposal only if sender is the guardian and proposal is not executed.\\n     * @param proposalId_ Id of proposal that is to be canceled.\\n     * @custom:access Sender must be the guardian.\\n     * @custom:event Emits ProposalCanceled with proposal id of the canceled proposal.\\n     */\\n    function cancel(uint256 proposalId_) external {\\n        require(\\n            state(proposalId_) == ProposalState.Queued,\\n            \\\"OmnichainGovernanceExecutor::cancel: proposal should be queued and not executed\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId_];\\n        require(msg.sender == GUARDIAN, \\\"OmnichainGovernanceExecutor::cancel: sender must be guardian\\\");\\n\\n        proposal.canceled = true;\\n        ITimelock timelock = proposalTimelocks[proposal.proposalType];\\n        uint256 eta = proposal.eta;\\n        uint256 length = proposal.targets.length;\\n\\n        emit ProposalCanceled(proposalId_);\\n\\n        for (uint256 i; i < length; ) {\\n            timelock.cancelTransaction(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                eta\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the state of a proposal\\n     * @param proposalId_ The id of the proposal\\n     * @return Proposal state\\n     */\\n    function state(uint256 proposalId_) public view returns (ProposalState) {\\n        Proposal storage proposal = proposals[proposalId_];\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        } else if (proposal.executed) {\\n            return ProposalState.Executed;\\n        } else if (queued[proposalId_]) {\\n            // queued only when proposal is received\\n            return ProposalState.Queued;\\n        } else {\\n            revert InvalidProposalId();\\n        }\\n    }\\n\\n    /**\\n     * @notice Process blocking LayerZero receive request.\\n     * @param srcChainId_ Source chain Id.\\n     * @param srcAddress_ Source address from which payload is received.\\n     * @param nonce_ Nonce associated with the payload to prevent replay attacks.\\n     * @param payload_ Encoded payload containing proposal information.\\n     * @custom:event Emit ReceivePayloadFailed if call fails.\\n     */\\n    function _blockingLzReceive(\\n        uint16 srcChainId_,\\n        bytes memory srcAddress_,\\n        uint64 nonce_,\\n        bytes memory payload_\\n    ) internal virtual override whenNotPaused {\\n        uint256 gasToStoreAndEmit = 30000; // enough gas to ensure we can store the payload and emit the event\\n\\n        require(srcChainId_ == srcChainId, \\\"OmnichainGovernanceExecutor::_blockingLzReceive: invalid source chain id\\\");\\n\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\\n            gasleft() - gasToStoreAndEmit,\\n            150,\\n            abi.encodeCall(this.nonblockingLzReceive, (srcChainId_, srcAddress_, nonce_, payload_))\\n        );\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            bytes32 hashedPayload = keccak256(payload_);\\n            failedMessages[srcChainId_][srcAddress_][nonce_] = hashedPayload;\\n            emit ReceivePayloadFailed(srcChainId_, srcAddress_, nonce_, reason); // Retrieve payload from the src side tx if needed to clear\\n        }\\n    }\\n\\n    /**\\n     * @notice Process non blocking LayerZero receive request.\\n     * @param payload_ Encoded payload containing proposal information.\\n     * @custom:event Emit ProposalReceived\\n     */\\n    function _nonblockingLzReceive(uint16, bytes memory, uint64, bytes memory payload_) internal virtual override {\\n        (bytes memory payload, uint256 pId) = abi.decode(payload_, (bytes, uint256));\\n        (\\n            address[] memory targets,\\n            uint256[] memory values,\\n            string[] memory signatures,\\n            bytes[] memory calldatas,\\n            uint8 pType\\n        ) = abi.decode(payload, (address[], uint256[], string[], bytes[], uint8));\\n        require(proposals[pId].id == 0, \\\"OmnichainGovernanceExecutor::_nonblockingLzReceive: duplicate proposal\\\");\\n        require(\\n            targets.length == values.length &&\\n                targets.length == signatures.length &&\\n                targets.length == calldatas.length,\\n            \\\"OmnichainGovernanceExecutor::_nonblockingLzReceive: proposal function information arity mismatch\\\"\\n        );\\n        require(\\n            pType < uint8(type(ProposalType).max) + 1,\\n            \\\"OmnichainGovernanceExecutor::_nonblockingLzReceive: invalid proposal type\\\"\\n        );\\n        _isEligibleToReceive(targets.length);\\n\\n        Proposal memory newProposal = Proposal({\\n            id: pId,\\n            eta: 0,\\n            targets: targets,\\n            values: values,\\n            signatures: signatures,\\n            calldatas: calldatas,\\n            canceled: false,\\n            executed: false,\\n            proposalType: pType\\n        });\\n\\n        proposals[pId] = newProposal;\\n        lastProposalReceived = pId;\\n\\n        emit ProposalReceived(newProposal.id, targets, values, signatures, calldatas, pType);\\n        _queue(pId);\\n    }\\n\\n    /**\\n     * @notice Queue proposal for execution.\\n     * @param proposalId_ Proposal to be queued.\\n     * @custom:event Emit ProposalQueued with proposal id and eta.\\n     */\\n    function _queue(uint256 proposalId_) internal {\\n        Proposal storage proposal = proposals[proposalId_];\\n        uint256 eta = block.timestamp + proposalTimelocks[proposal.proposalType].delay();\\n\\n        proposal.eta = eta;\\n        queued[proposalId_] = true;\\n        uint8 proposalType = proposal.proposalType;\\n        uint256 length = proposal.targets.length;\\n        emit ProposalQueued(proposalId_, eta);\\n\\n        for (uint256 i; i < length; ) {\\n            _queueOrRevertInternal(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                eta,\\n                proposalType\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check for unique proposal.\\n     * @param target_ Address of the contract with the method to be called.\\n     * @param value_ Native token amount sent with the transaction.\\n     * @param signature_ Signature of the function to be called.\\n     * @param data_ Arguments to be passed to the function when called.\\n     * @param eta_ Timestamp after which the transaction can be executed.\\n     * @param proposalType_ Type of proposal.\\n     */\\n    function _queueOrRevertInternal(\\n        address target_,\\n        uint256 value_,\\n        string memory signature_,\\n        bytes memory data_,\\n        uint256 eta_,\\n        uint8 proposalType_\\n    ) internal {\\n        require(\\n            !proposalTimelocks[proposalType_].queuedTransactions(\\n                keccak256(abi.encode(target_, value_, signature_, data_, eta_))\\n            ),\\n            \\\"OmnichainGovernanceExecutor::queueOrRevertInternal: identical proposal action already queued at eta\\\"\\n        );\\n\\n        proposalTimelocks[proposalType_].queueTransaction(target_, value_, signature_, data_, eta_);\\n    }\\n}\\n\",\"keccak256\":\"0x186850745bb229ec660dc68b62312a904e1b772dd08741135d782f19f10d2144\",\"license\":\"MIT\"},\"contracts/Cross-chain/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title ITimelock\\n * @author Venus\\n * @dev Interface for Timelock contract\\n * @custom:security-contact https://github.com/VenusProtocol/governance-contracts#discussion\\n */\\ninterface ITimelock {\\n    /**\\n     * @notice Delay period for the transaction queue\\n     */\\n    function delay() external view returns (uint256);\\n\\n    /**\\n     * @notice Required period to execute a proposal transaction\\n     */\\n    function GRACE_PERIOD() external view returns (uint256);\\n\\n    /**\\n     * @notice Method for accepting a proposed admin\\n     */\\n    function acceptAdmin() external;\\n\\n    /**\\n     * @notice Show mapping of queued transactions\\n     * @param hash Transaction hash\\n     */\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n    /**\\n     * @notice Called for each action when queuing a proposal\\n     * @param target Address of the contract with the method to be called\\n     * @param value Native token amount sent with the transaction\\n     * @param signature signature of the function to be called\\n     * @param data Arguments to be passed to the function when called\\n     * @param eta Timestamp after which the transaction can be executed\\n     * @return Hash of the queued transaction\\n     */\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Called to cancel a queued transaction\\n     * @param target Address of the contract with the method to be called\\n     * @param value Native token amount sent with the transaction\\n     * @param signature signature of the function to be called\\n     * @param data Arguments to be passed to the function when called\\n     * @param eta Timestamp after which the transaction can be executed\\n     */\\n    function cancelTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external;\\n\\n    /**\\n     * @notice Called to execute a queued transaction\\n     * @param target Address of the contract with the method to be called\\n     * @param value Native token amount sent with the transaction\\n     * @param signature signature of the function to be called\\n     * @param data Arguments to be passed to the function when called\\n     * @param eta Timestamp after which the transaction can be executed\\n     * @return Result of function call\\n     */\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x58b50b618907bd15e1a4d001bbaf03343701c44fe77ff9f3bba04b73da26ee25\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620044aa380380620044aa83398101604081905262000034916200013a565b60016000558280806200004733620000a0565b6001600160a01b0316608052506007805460ff191690556200006981620000f2565b506200007582620000f2565b6001600160a01b039190911660a052600b805461ffff191661ffff909216919091179055506200018e565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166200011a576040516342bcdf7f60e11b815260040160405180910390fd5b50565b80516001600160a01b03811681146200013557600080fd5b919050565b6000806000606084860312156200015057600080fd5b6200015b846200011d565b92506200016b602085016200011d565b9150604084015161ffff811681146200018357600080fd5b809150509250925092565b60805160a0516142c5620001e5600039600081816105ec0152610f5d0152600081816107bd0152818161096e01528181610bfa01528181610cc8015281816111d4015281816116f30152611d7901526142c56000f3fe6080604052600436106102db5760003560e01c80638456cb5911610184578063c4461834116100d6578063eb8d72b71161008a578063f2fde38b11610064578063f2fde38b1461090b578063f5ecbdbc1461092b578063fe0d94c11461094b57600080fd5b8063eb8d72b714610888578063ed66039b146108a8578063ee9799ee146108c857600080fd5b8063cbed8b9c116100bb578063cbed8b9c14610835578063d1deba1f14610855578063df2a5b3b1461086857600080fd5b8063c4461834146107ff578063c8b42e5b1461081557600080fd5b8063950c8a7411610138578063a6c3d16511610112578063a6c3d1651461078b578063b353aaa7146107ab578063baf3292d146107df57600080fd5b8063950c8a741461070e5780639f0c31011461073b5780639f38369a1461076b57600080fd5b80638cfd8f5c116101695780638cfd8f5c1461068b5780638da5cb5b146106c35780639493ffad146106ee57600080fd5b80638456cb5914610660578063876919e81461067557600080fd5b806340e58ee51161023d5780635c975abb116101f1578063715018a6116101cb578063715018a6146105ce578063724c184c146105da5780637533d7881461063357600080fd5b80635c975abb1461058057806366ad5c8a1461059857806370f6ad9a146105b857600080fd5b80634406baaf116102225780634406baaf146104ed57806349d12605146105035780635b8c41e61461053157600080fd5b806340e58ee5146104ad57806342d65a8d146104cd57600080fd5b806310ddb137116102945780633e4f49e6116102795780633e4f49e61461043e5780633f1f4fa41461046b5780633f4ba83a1461049857600080fd5b806310ddb137146103ee5780633d8b38f61461040e57600080fd5b80630435bb56116102c55780630435bb561461038a57806307e0db17146103ae5780630df37483146103ce57600080fd5b80621d3567146102e0578063013cf08b14610302575b600080fd5b3480156102ec57600080fd5b506103006102fb36600461346e565b61096b565b005b34801561030e57600080fd5b5061035461031d366004613502565b600d6020526000908152604090208054600182015460069092015490919060ff808216916101008104821691620100009091041685565b60408051958652602086019490945291151592840192909252901515606083015260ff16608082015260a0015b60405180910390f35b34801561039657600080fd5b506103a060085481565b604051908152602001610381565b3480156103ba57600080fd5b506103006103c936600461351b565b610bc0565b3480156103da57600080fd5b506103006103e9366004613536565b610c6f565b3480156103fa57600080fd5b5061030061040936600461351b565b610c8e565b34801561041a57600080fd5b5061042e610429366004613560565b610d0c565b6040519015158152602001610381565b34801561044a57600080fd5b5061045e610459366004613502565b610dd9565b60405161038191906135e2565b34801561047757600080fd5b506103a061048636600461351b565b60046020526000908152604090205481565b3480156104a457600080fd5b50610300610e70565b3480156104b957600080fd5b506103006104c8366004613502565b610e82565b3480156104d957600080fd5b506103006104e8366004613560565b61118f565b3480156104f957600080fd5b506103a0600c5481565b34801561050f57600080fd5b50600b5461051e9061ffff1681565b60405161ffff9091168152602001610381565b34801561053d57600080fd5b506103a061054c3660046136ab565b6006602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561058c57600080fd5b5060075460ff1661042e565b3480156105a457600080fd5b506103006105b336600461346e565b61123b565b3480156105c457600080fd5b506103a060095481565b34801561030057600080fd5b3480156105e657600080fd5b5061060e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610381565b34801561063f57600080fd5b5061065361064e36600461351b565b611326565b60405161038191906137a8565b34801561066c57600080fd5b506103006113c0565b34801561068157600080fd5b506103a0600a5481565b34801561069757600080fd5b506103a06106a63660046137bb565b600360209081526000928352604080842090915290825290205481565b3480156106cf57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff1661060e565b3480156106fa57600080fd5b50610300610709366004613502565b6113d0565b34801561071a57600080fd5b5060055461060e9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561074757600080fd5b5061042e610756366004613502565b600f6020526000908152604090205460ff1681565b34801561077757600080fd5b5061065361078636600461351b565b611419565b34801561079757600080fd5b506103006107a6366004613560565b611528565b3480156107b757600080fd5b5061060e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107eb57600080fd5b506103006107fa366004613810565b6115bb565b34801561080b57600080fd5b506103a061271081565b34801561082157600080fd5b5061030061083036600461351b565b61163c565b34801561084157600080fd5b5061030061085036600461382d565b6116ae565b61030061086336600461346e565b611769565b34801561087457600080fd5b5061030061088336600461389c565b6119b7565b34801561089457600080fd5b506103006108a3366004613560565b611a21565b3480156108b457600080fd5b506103006108c33660046138fc565b611a7b565b3480156108d457600080fd5b5061060e6108e3366004613502565b600e6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b34801561091757600080fd5b50610300610926366004613810565b611c92565b34801561093757600080fd5b50610653610946366004613996565b611d2f565b34801561095757600080fd5b50610300610966366004613502565b611e06565b337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146109f55760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526002602052604081208054610a13906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3f906139e3565b8015610a8c5780601f10610a6157610100808354040283529160200191610a8c565b820191906000526020600020905b815481529060010190602001808311610a6f57829003601f168201915b50505050509050805186869050148015610aa7575060008151115b8015610acf575080516020820120604051610ac59088908890613a30565b6040518091039020145b610b415760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016109ec565b610bb78787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506120a892505050565b50505050505050565b610bc86122ad565b6040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906307e0db17906024015b600060405180830381600087803b158015610c5457600080fd5b505af1158015610c68573d6000803e3d6000fd5b5050505050565b610c776122ad565b61ffff909116600090815260046020526040902055565b610c966122ad565b6040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906310ddb13790602401610c3a565b61ffff831660009081526002602052604081208054829190610d2d906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d59906139e3565b8015610da65780601f10610d7b57610100808354040283529160200191610da6565b820191906000526020600020905b815481529060010190602001808311610d8957829003601f168201915b505050505090508383604051610dbd929190613a30565b60405180910390208180519060200120149150505b9392505050565b6000818152600d60205260408120600681015460ff1615610dfd5750600092915050565b6006810154610100900460ff1615610e185750600292915050565b6000838152600f602052604090205460ff1615610e385750600192915050565b6040517f0992f7ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b610e786122ad565b610e80612314565b565b6001610e8d82610dd9565b6002811115610e9e57610e9e6135b3565b14610f375760405162461bcd60e51b815260206004820152604f60248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a63616e60448201527f63656c3a2070726f706f73616c2073686f756c6420626520717565756564206160648201527f6e64206e6f742065786563757465640000000000000000000000000000000000608482015260a4016109ec565b6000818152600d602052604090203373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610ff05760405162461bcd60e51b815260206004820152603c60248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a63616e60448201527f63656c3a2073656e646572206d75737420626520677561726469616e0000000060648201526084016109ec565b60068101805460ff19166001908117918290556201000090910460ff166000908152600e602052604080822054928401546002850154915173ffffffffffffffffffffffffffffffffffffffff90941693909286917f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c9190a260005b81811015611187578373ffffffffffffffffffffffffffffffffffffffff1663591fcdfe8660020183815481106110a5576110a5613a40565b60009182526020909120015460038801805473ffffffffffffffffffffffffffffffffffffffff90921691859081106110e0576110e0613a40565b906000526020600020015488600401858154811061110057611100613a40565b9060005260206000200189600501868154811061111f5761111f613a40565b90600052602060002001886040518663ffffffff1660e01b815260040161114a959493929190613b28565b600060405180830381600087803b15801561116457600080fd5b505af1158015611178573d6000803e3d6000fd5b5050505080600101905061106c565b505050505050565b6111976122ad565b6040517f42d65a8d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d9061120d90869086908690600401613bad565b600060405180830381600087803b15801561122757600080fd5b505af1158015610bb7573d6000803e3d6000fd5b3330146112b05760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560448201527f204c7a417070000000000000000000000000000000000000000000000000000060648201526084016109ec565b6111878686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781528993509150879087908190840183828082843760009201919091525061237392505050565b6002602052600090815260409020805461133f906139e3565b80601f016020809104026020016040519081016040528092919081815260200182805461136b906139e3565b80156113b85780601f1061138d576101008083540402835291602001916113b8565b820191906000526020600020905b81548152906001019060200180831161139b57829003601f168201915b505050505081565b6113c86122ad565b610e8061279d565b6113d86122ad565b60085460408051918252602082018390527f0a653bb1a57e62cfd43f0dc557c7223e8b58896238b5f9b300ef646d37b82d1b910160405180910390a1600855565b61ffff811660009081526002602052604081208054606092919061143c906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054611468906139e3565b80156114b55780601f1061148a576101008083540402835291602001916114b5565b820191906000526020600020905b81548152906001019060200180831161149857829003601f168201915b50505050509050805160000361150d5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f726400000060448201526064016109ec565b610dd26000601483516115209190613bfa565b8391906127da565b6115306122ad565b81813060405160200161154593929190613c11565b60408051601f1981840301815291815261ffff8516600090815260026020908152919020825161157a9391929091019061310f565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce8383836040516115ae93929190613bad565b60405180910390a1505050565b6115c36122ad565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b9060200160405180910390a150565b6116446122ad565b600b5460405161ffff8084169216907fb17c58d5977290696b6eea77c81c725f3dc83e426252bd9ece6287c1b8d0e96890600090a3600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff92909216919091179055565b6116b66122ad565b6040517fcbed8b9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906117309088908890889088908890600401613c4a565b600060405180830381600087803b15801561174a57600080fd5b505af115801561175e573d6000803e3d6000fd5b505050505050505050565b61ffff8616600090815260066020526040808220905161178c9088908890613a30565b908152604080516020928190038301902067ffffffffffffffff8716600090815292529020549050806118275760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201527f616765000000000000000000000000000000000000000000000000000000000060648201526084016109ec565b808383604051611838929190613a30565b6040518091039020146118b35760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016109ec565b61ffff871660009081526006602052604080822090516118d69089908990613a30565b908152604080516020928190038301812067ffffffffffffffff8916600090815290845282902093909355601f8801829004820283018201905286825261196f918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061237392505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516119a6959493929190613c78565b60405180910390a150505050505050565b6119bf6122ad565b61ffff83811660008181526003602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac0906060016115ae565b611a296122ad565b61ffff83166000908152600260205260409020611a47908383613193565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516115ae93929190613bad565b611a836122ad565b6000611a9160026001613cb4565b90508060ff16825114611b585760405162461bcd60e51b815260206004820152606960248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a696e6960448201527f7469616c697a653a6e756d626572206f662074696d656c6f636b73205f73686f60648201527f756c64206d6174636820746865206e756d626572206f6620676f7665726e616e60848201527f636520726f75746573000000000000000000000000000000000000000000000060a482015260c4016109ec565b60005b8160ff168160ff161015611c8d57611b8e838260ff1681518110611b8157611b81613a40565b6020026020010151612902565b828160ff1681518110611ba357611ba3613a40565b60209081029190910181015160ff83166000818152600e845260409081902054905191825273ffffffffffffffffffffffffffffffffffffffff928316939216917ffc45ae51ac4893a3f843d030fbfd4037c0c196109c9e667645b8f144c83c16ea910160405180910390a3828160ff1681518110611c2457611c24613a40565b60209081029190910181015160ff83166000908152600e909252604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055600101611b5b565b505050565b611c9a6122ad565b73ffffffffffffffffffffffffffffffffffffffff8116611d235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109ec565b611d2c8161294f565b50565b6040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff808616600483015284166024820152306044820152606481018290526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90608401600060405180830381865afa158015611dd5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dfd9190810190613d29565b95945050505050565b611e0e6129c6565b6001611e1982610dd9565b6002811115611e2a57611e2a6135b3565b14611ec35760405162461bcd60e51b815260206004820152605360248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a65786560448201527f637574653a2070726f706f73616c2063616e206f6e6c7920626520657865637560648201527f7465642069662069742069732071756575656400000000000000000000000000608482015260a4016109ec565b6000818152600d602090815260408083206006810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179081905562010000900460ff168452600e90925280832054600183015460028401549251939473ffffffffffffffffffffffffffffffffffffffff9092169390929186917f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f9190a260005b81811015612099578373ffffffffffffffffffffffffffffffffffffffff16630825f38f866002018381548110611fa457611fa4613a40565b60009182526020909120015460038801805473ffffffffffffffffffffffffffffffffffffffff9092169185908110611fdf57611fdf613a40565b9060005260206000200154886004018581548110611fff57611fff613a40565b9060005260206000200189600501868154811061201e5761201e613a40565b90600052602060002001886040518663ffffffff1660e01b8152600401612049959493929190613b28565b6000604051808303816000875af1158015612068573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120909190810190613d29565b50600101611f6b565b5050505050611d2c6001600055565b6120b0612a1f565b600b546175309061ffff8681169116146121585760405162461bcd60e51b815260206004820152604860248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a5f626c60448201527f6f636b696e674c7a526563656976653a20696e76616c696420736f757263652060648201527f636861696e206964000000000000000000000000000000000000000000000000608482015260a4016109ec565b6000806121ea835a61216a9190613bfa565b60963073ffffffffffffffffffffffffffffffffffffffff166366ad5c8a8b8b8b8b60405160240161219f9493929190613d66565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e09390931b929092179091523093929150612a72565b9150915081610bb75760008480519060200120905080600660008a61ffff1661ffff168152602001908152602001600020886040516122299190613da5565b90815260408051918290036020908101832067ffffffffffffffff8b1660009081529152209190915561225d908890613da5565b60405180910390208861ffff167f41d73ce7be31a588d59fe9013cdcfe583bc0aab25093d042b64cade0df730656888560405161229b929190613dc1565b60405180910390a35050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109ec565b61231c612afd565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6000808280602001905181019061238a9190613de4565b915091506000806000806000868060200190518101906123aa9190613fb7565b60008b8152600d6020526040902054949950929750909550935091501561245f5760405162461bcd60e51b815260206004820152604660248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a5f6e6f60448201527f6e626c6f636b696e674c7a526563656976653a206475706c696361746520707260648201527f6f706f73616c0000000000000000000000000000000000000000000000000000608482015260a4016109ec565b83518551148015612471575082518551145b801561247e575081518551145b6125165760405162461bcd60e51b815260206004820152606060248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a5f6e6f60448201527f6e626c6f636b696e674c7a526563656976653a2070726f706f73616c2066756e60648201527f6374696f6e20696e666f726d6174696f6e206172697479206d69736d61746368608482015260a4016109ec565b61252260026001613cb4565b60ff168160ff16106125c25760405162461bcd60e51b815260206004820152604960248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a5f6e6f60448201527f6e626c6f636b696e674c7a526563656976653a20696e76616c69642070726f7060648201527f6f73616c20747970650000000000000000000000000000000000000000000000608482015260a4016109ec565b6125cc8551612b4f565b6040805161012081018252878152600060208083018281528385018a8152606085018a90526080850189905260a0850188905260c0850184905260e0850184905260ff87166101008601528b8452600d835294909220835181559151600183015592518051929384936126459260028501920190613207565b5060608201518051612661916003840191602090910190613281565b506080820151805161267d9160048401916020909101906132bb565b5060a08201518051612699916005840191602090910190613314565b5060c08201516006909101805460e08401516101009485015160ff1662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff9115159095027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff941515949094167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216919091179290921791909116919091179055600c87905580516040517fc37d19c9a6a9a568b5071658f9b5082ff8f142df3cf090385c5621ab119380659061277e908990899089908990899061412b565b60405180910390a261278f87612bdf565b505050505050505050505050565b6127a5612a1f565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123493390565b6060816127e881601f6141f5565b10156128365760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016109ec565b61284082846141f5565b845110156128905760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016109ec565b6060821580156128af57604051915060008252602082016040526128f9565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156128e85780518352602092830192016128d0565b5050858452601f01601f1916604052505b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff8116611d2c576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260005403612a185760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109ec565b6002600055565b60075460ff1615610e805760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016109ec565b6000606060008060008661ffff1667ffffffffffffffff811115612a9857612a98613623565b6040519080825280601f01601f191660200182016040528015612ac2576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115612ae4578692505b828152826000602083013e909890975095505050505050565b60075460ff16610e805760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016109ec565b600954600a544291906201518090612b679084613bfa565b1115612b795750600a81905581612b86565b612b8383826141f5565b90505b600854811115612bd85760405162461bcd60e51b815260206004820181905260248201527f4461696c79205472616e73616374696f6e204c696d697420457863656564656460448201526064016109ec565b6009555050565b6000818152600d60209081526040808320600681015462010000900460ff168452600e83528184205482517f6a42b8f8000000000000000000000000000000000000000000000000000000008152925191949373ffffffffffffffffffffffffffffffffffffffff90911692636a42b8f892600480830193928290030181865afa158015612c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c95919061420d565b612c9f90426141f5565b60018084018290556000858152600f602052604090819020805460ff191690921790915560068401546002850154915192935062010000900460ff169185907f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290612d0d9086815260200190565b60405180910390a260005b8181101561118757612ed5856002018281548110612d3857612d38613a40565b60009182526020909120015460038701805473ffffffffffffffffffffffffffffffffffffffff9092169184908110612d7357612d73613a40565b9060005260206000200154876004018481548110612d9357612d93613a40565b906000526020600020018054612da8906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054612dd4906139e3565b8015612e215780601f10612df657610100808354040283529160200191612e21565b820191906000526020600020905b815481529060010190602001808311612e0457829003601f168201915b5050505050886005018581548110612e3b57612e3b613a40565b906000526020600020018054612e50906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054612e7c906139e3565b8015612ec95780601f10612e9e57610100808354040283529160200191612ec9565b820191906000526020600020905b815481529060010190602001808311612eac57829003601f168201915b50505050508888612edd565b600101612d18565b60ff81166000908152600e602090815260409182902054915173ffffffffffffffffffffffffffffffffffffffff9092169163f2b0653791612f29918a918a918a918a918a9101614226565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612f5d91815260200190565b602060405180830381865afa158015612f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9e919061426d565b1561305d5760405162461bcd60e51b815260206004820152606360248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a71756560448201527f75654f72526576657274496e7465726e616c3a206964656e746963616c20707260648201527f6f706f73616c20616374696f6e20616c7265616479207175657565642061742060848201527f657461000000000000000000000000000000000000000000000000000000000060a482015260c4016109ec565b60ff81166000908152600e6020526040908190205490517f3a66f90100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633a66f901906130cc9089908990899089908990600401614226565b6020604051808303816000875af11580156130eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb7919061420d565b82805461311b906139e3565b90600052602060002090601f01602090048101928261313d5760008555613183565b82601f1061315657805160ff1916838001178555613183565b82800160010185558215613183579182015b82811115613183578251825591602001919060010190613168565b5061318f92915061336d565b5090565b82805461319f906139e3565b90600052602060002090601f0160209004810192826131c15760008555613183565b82601f106131da5782800160ff19823516178555613183565b82800160010185558215613183579182015b828111156131835782358255916020019190600101906131ec565b828054828255906000526020600020908101928215613183579160200282015b8281111561318357825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190613227565b8280548282559060005260206000209081019282156131835791602002820182811115613183578251825591602001919060010190613168565b828054828255906000526020600020908101928215613308579160200282015b8281111561330857825180516132f891849160209091019061310f565b50916020019190600101906132db565b5061318f929150613382565b828054828255906000526020600020908101928215613361579160200282015b82811115613361578251805161335191849160209091019061310f565b5091602001919060010190613334565b5061318f92915061339f565b5b8082111561318f576000815560010161336e565b8082111561318f57600061339682826133bc565b50600101613382565b8082111561318f5760006133b382826133bc565b5060010161339f565b5080546133c8906139e3565b6000825580601f106133d8575050565b601f016020900490600052602060002090810190611d2c919061336d565b803561ffff8116811461340857600080fd5b919050565b60008083601f84011261341f57600080fd5b50813567ffffffffffffffff81111561343757600080fd5b60208301915083602082850101111561344f57600080fd5b9250929050565b803567ffffffffffffffff8116811461340857600080fd5b6000806000806000806080878903121561348757600080fd5b613490876133f6565b9550602087013567ffffffffffffffff808211156134ad57600080fd5b6134b98a838b0161340d565b90975095508591506134cd60408a01613456565b945060608901359150808211156134e357600080fd5b506134f089828a0161340d565b979a9699509497509295939492505050565b60006020828403121561351457600080fd5b5035919050565b60006020828403121561352d57600080fd5b610dd2826133f6565b6000806040838503121561354957600080fd5b613552836133f6565b946020939093013593505050565b60008060006040848603121561357557600080fd5b61357e846133f6565b9250602084013567ffffffffffffffff81111561359a57600080fd5b6135a68682870161340d565b9497909650939450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602081016003831061361d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561367b5761367b613623565b604052919050565b600067ffffffffffffffff82111561369d5761369d613623565b50601f01601f191660200190565b6000806000606084860312156136c057600080fd5b6136c9846133f6565b9250602084013567ffffffffffffffff8111156136e557600080fd5b8401601f810186136136f657600080fd5b803561370961370482613683565b613652565b81815287602083850101111561371e57600080fd5b8160208401602083013760006020838301015280945050505061374360408501613456565b90509250925092565b60005b8381101561376757818101518382015260200161374f565b83811115613776576000848401525b50505050565b6000815180845261379481602086016020860161374c565b601f01601f19169290920160200192915050565b602081526000610dd2602083018461377c565b600080604083850312156137ce57600080fd5b6137d7836133f6565b91506137e5602084016133f6565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114611d2c57600080fd5b60006020828403121561382257600080fd5b8135610dd2816137ee565b60008060008060006080868803121561384557600080fd5b61384e866133f6565b945061385c602087016133f6565b935060408601359250606086013567ffffffffffffffff81111561387f57600080fd5b61388b8882890161340d565b969995985093965092949392505050565b6000806000606084860312156138b157600080fd5b6138ba846133f6565b92506138c8602085016133f6565b9150604084013590509250925092565b600067ffffffffffffffff8211156138f2576138f2613623565b5060051b60200190565b6000602080838503121561390f57600080fd5b823567ffffffffffffffff81111561392657600080fd5b8301601f8101851361393757600080fd5b8035613945613704826138d8565b81815260059190911b8201830190838101908783111561396457600080fd5b928401925b8284101561398b57833561397c816137ee565b82529284019290840190613969565b979650505050505050565b600080600080608085870312156139ac57600080fd5b6139b5856133f6565b93506139c3602086016133f6565b925060408501356139d3816137ee565b9396929550929360600135925050565b600181811c908216806139f757607f821691505b602082108103610e6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8054600090600181811c9080831680613a8957607f831692505b60208084108203613ac3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b838852818015613ada5760018114613aee57613b1c565b60ff198616828a0152604089019650613b1c565b876000528160002060005b86811015613b145781548b8201850152908501908301613af9565b8a0183019750505b50505050505092915050565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015260a060408201526000613b5d60a0830186613a6f565b8281036060840152613b6f8186613a6f565b9150508260808301529695505050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b61ffff84168152604060208201526000611dfd604083018486613b82565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015613c0c57613c0c613bcb565b500390565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b600061ffff80881683528087166020840152508460408301526080606083015261398b608083018486613b82565b61ffff86168152608060208201526000613c96608083018688613b82565b67ffffffffffffffff94909416604083015250606001529392505050565b600060ff821660ff84168060ff03821115613cd157613cd1613bcb565b019392505050565b6000613ce761370484613683565b9050828152838383011115613cfb57600080fd5b610dd283602083018461374c565b600082601f830112613d1a57600080fd5b610dd283835160208501613cd9565b600060208284031215613d3b57600080fd5b815167ffffffffffffffff811115613d5257600080fd5b613d5e84828501613d09565b949350505050565b61ffff85168152608060208201526000613d83608083018661377c565b67ffffffffffffffff85166040840152828103606084015261398b818561377c565b60008251613db781846020870161374c565b9190910192915050565b67ffffffffffffffff83168152604060208201526000613d5e604083018461377c565b60008060408385031215613df757600080fd5b825167ffffffffffffffff811115613e0e57600080fd5b613e1a85828601613d09565b925050602083015190509250929050565b600082601f830112613e3c57600080fd5b81516020613e4c613704836138d8565b82815260059290921b84018101918181019086841115613e6b57600080fd5b8286015b84811015613e865780518352918301918301613e6f565b509695505050505050565b600082601f830112613ea257600080fd5b81516020613eb2613704836138d8565b82815260059290921b84018101918181019086841115613ed157600080fd5b8286015b84811015613e8657805167ffffffffffffffff811115613ef55760008081fd5b8701603f81018913613f075760008081fd5b613f18898683015160408401613cd9565b845250918301918301613ed5565b600082601f830112613f3757600080fd5b81516020613f47613704836138d8565b82815260059290921b84018101918181019086841115613f6657600080fd5b8286015b84811015613e8657805167ffffffffffffffff811115613f8a5760008081fd5b613f988986838b0101613d09565b845250918301918301613f6a565b805160ff8116811461340857600080fd5b600080600080600060a08688031215613fcf57600080fd5b855167ffffffffffffffff80821115613fe757600080fd5b818801915088601f830112613ffb57600080fd5b8151602061400b613704836138d8565b82815260059290921b8401810191818101908c84111561402a57600080fd5b948201945b83861015614051578551614042816137ee565b8252948201949082019061402f565b918b015191995090935050508082111561406a57600080fd5b61407689838a01613e2b565b9550604088015191508082111561408c57600080fd5b61409889838a01613e91565b945060608801519150808211156140ae57600080fd5b506140bb88828901613f26565b9250506140ca60808701613fa6565b90509295509295909350565b600081518084526020808501808196508360051b8101915082860160005b8581101561411e57828403895261410c84835161377c565b988501989350908401906001016140f4565b5091979650505050505050565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561417a57815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101614148565b5050508381038285015287518082528883019183019060005b818110156141af57835183529284019291840191600101614193565b505084810360408601526141c381896140d6565b9250505082810360608401526141d981866140d6565b9150506141eb608083018460ff169052565b9695505050505050565b6000821982111561420857614208613bcb565b500190565b60006020828403121561421f57600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015260a06040820152600061425b60a083018661377c565b8281036060840152613b6f818661377c565b60006020828403121561427f57600080fd5b81518015158114610dd257600080fdfea26469706673582212205698dd623403fca20694b70f52ebceba4d631de80b182fa4e194d0c9ea19867164736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106102db5760003560e01c80638456cb5911610184578063c4461834116100d6578063eb8d72b71161008a578063f2fde38b11610064578063f2fde38b1461090b578063f5ecbdbc1461092b578063fe0d94c11461094b57600080fd5b8063eb8d72b714610888578063ed66039b146108a8578063ee9799ee146108c857600080fd5b8063cbed8b9c116100bb578063cbed8b9c14610835578063d1deba1f14610855578063df2a5b3b1461086857600080fd5b8063c4461834146107ff578063c8b42e5b1461081557600080fd5b8063950c8a7411610138578063a6c3d16511610112578063a6c3d1651461078b578063b353aaa7146107ab578063baf3292d146107df57600080fd5b8063950c8a741461070e5780639f0c31011461073b5780639f38369a1461076b57600080fd5b80638cfd8f5c116101695780638cfd8f5c1461068b5780638da5cb5b146106c35780639493ffad146106ee57600080fd5b80638456cb5914610660578063876919e81461067557600080fd5b806340e58ee51161023d5780635c975abb116101f1578063715018a6116101cb578063715018a6146105ce578063724c184c146105da5780637533d7881461063357600080fd5b80635c975abb1461058057806366ad5c8a1461059857806370f6ad9a146105b857600080fd5b80634406baaf116102225780634406baaf146104ed57806349d12605146105035780635b8c41e61461053157600080fd5b806340e58ee5146104ad57806342d65a8d146104cd57600080fd5b806310ddb137116102945780633e4f49e6116102795780633e4f49e61461043e5780633f1f4fa41461046b5780633f4ba83a1461049857600080fd5b806310ddb137146103ee5780633d8b38f61461040e57600080fd5b80630435bb56116102c55780630435bb561461038a57806307e0db17146103ae5780630df37483146103ce57600080fd5b80621d3567146102e0578063013cf08b14610302575b600080fd5b3480156102ec57600080fd5b506103006102fb36600461346e565b61096b565b005b34801561030e57600080fd5b5061035461031d366004613502565b600d6020526000908152604090208054600182015460069092015490919060ff808216916101008104821691620100009091041685565b60408051958652602086019490945291151592840192909252901515606083015260ff16608082015260a0015b60405180910390f35b34801561039657600080fd5b506103a060085481565b604051908152602001610381565b3480156103ba57600080fd5b506103006103c936600461351b565b610bc0565b3480156103da57600080fd5b506103006103e9366004613536565b610c6f565b3480156103fa57600080fd5b5061030061040936600461351b565b610c8e565b34801561041a57600080fd5b5061042e610429366004613560565b610d0c565b6040519015158152602001610381565b34801561044a57600080fd5b5061045e610459366004613502565b610dd9565b60405161038191906135e2565b34801561047757600080fd5b506103a061048636600461351b565b60046020526000908152604090205481565b3480156104a457600080fd5b50610300610e70565b3480156104b957600080fd5b506103006104c8366004613502565b610e82565b3480156104d957600080fd5b506103006104e8366004613560565b61118f565b3480156104f957600080fd5b506103a0600c5481565b34801561050f57600080fd5b50600b5461051e9061ffff1681565b60405161ffff9091168152602001610381565b34801561053d57600080fd5b506103a061054c3660046136ab565b6006602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561058c57600080fd5b5060075460ff1661042e565b3480156105a457600080fd5b506103006105b336600461346e565b61123b565b3480156105c457600080fd5b506103a060095481565b34801561030057600080fd5b3480156105e657600080fd5b5061060e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610381565b34801561063f57600080fd5b5061065361064e36600461351b565b611326565b60405161038191906137a8565b34801561066c57600080fd5b506103006113c0565b34801561068157600080fd5b506103a0600a5481565b34801561069757600080fd5b506103a06106a63660046137bb565b600360209081526000928352604080842090915290825290205481565b3480156106cf57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff1661060e565b3480156106fa57600080fd5b50610300610709366004613502565b6113d0565b34801561071a57600080fd5b5060055461060e9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561074757600080fd5b5061042e610756366004613502565b600f6020526000908152604090205460ff1681565b34801561077757600080fd5b5061065361078636600461351b565b611419565b34801561079757600080fd5b506103006107a6366004613560565b611528565b3480156107b757600080fd5b5061060e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107eb57600080fd5b506103006107fa366004613810565b6115bb565b34801561080b57600080fd5b506103a061271081565b34801561082157600080fd5b5061030061083036600461351b565b61163c565b34801561084157600080fd5b5061030061085036600461382d565b6116ae565b61030061086336600461346e565b611769565b34801561087457600080fd5b5061030061088336600461389c565b6119b7565b34801561089457600080fd5b506103006108a3366004613560565b611a21565b3480156108b457600080fd5b506103006108c33660046138fc565b611a7b565b3480156108d457600080fd5b5061060e6108e3366004613502565b600e6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b34801561091757600080fd5b50610300610926366004613810565b611c92565b34801561093757600080fd5b50610653610946366004613996565b611d2f565b34801561095757600080fd5b50610300610966366004613502565b611e06565b337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146109f55760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff861660009081526002602052604081208054610a13906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3f906139e3565b8015610a8c5780601f10610a6157610100808354040283529160200191610a8c565b820191906000526020600020905b815481529060010190602001808311610a6f57829003601f168201915b50505050509050805186869050148015610aa7575060008151115b8015610acf575080516020820120604051610ac59088908890613a30565b6040518091039020145b610b415760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016109ec565b610bb78787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506120a892505050565b50505050505050565b610bc86122ad565b6040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906307e0db17906024015b600060405180830381600087803b158015610c5457600080fd5b505af1158015610c68573d6000803e3d6000fd5b5050505050565b610c776122ad565b61ffff909116600090815260046020526040902055565b610c966122ad565b6040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906310ddb13790602401610c3a565b61ffff831660009081526002602052604081208054829190610d2d906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d59906139e3565b8015610da65780601f10610d7b57610100808354040283529160200191610da6565b820191906000526020600020905b815481529060010190602001808311610d8957829003601f168201915b505050505090508383604051610dbd929190613a30565b60405180910390208180519060200120149150505b9392505050565b6000818152600d60205260408120600681015460ff1615610dfd5750600092915050565b6006810154610100900460ff1615610e185750600292915050565b6000838152600f602052604090205460ff1615610e385750600192915050565b6040517f0992f7ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b610e786122ad565b610e80612314565b565b6001610e8d82610dd9565b6002811115610e9e57610e9e6135b3565b14610f375760405162461bcd60e51b815260206004820152604f60248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a63616e60448201527f63656c3a2070726f706f73616c2073686f756c6420626520717565756564206160648201527f6e64206e6f742065786563757465640000000000000000000000000000000000608482015260a4016109ec565b6000818152600d602052604090203373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610ff05760405162461bcd60e51b815260206004820152603c60248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a63616e60448201527f63656c3a2073656e646572206d75737420626520677561726469616e0000000060648201526084016109ec565b60068101805460ff19166001908117918290556201000090910460ff166000908152600e602052604080822054928401546002850154915173ffffffffffffffffffffffffffffffffffffffff90941693909286917f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c9190a260005b81811015611187578373ffffffffffffffffffffffffffffffffffffffff1663591fcdfe8660020183815481106110a5576110a5613a40565b60009182526020909120015460038801805473ffffffffffffffffffffffffffffffffffffffff90921691859081106110e0576110e0613a40565b906000526020600020015488600401858154811061110057611100613a40565b9060005260206000200189600501868154811061111f5761111f613a40565b90600052602060002001886040518663ffffffff1660e01b815260040161114a959493929190613b28565b600060405180830381600087803b15801561116457600080fd5b505af1158015611178573d6000803e3d6000fd5b5050505080600101905061106c565b505050505050565b6111976122ad565b6040517f42d65a8d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d9061120d90869086908690600401613bad565b600060405180830381600087803b15801561122757600080fd5b505af1158015610bb7573d6000803e3d6000fd5b3330146112b05760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560448201527f204c7a417070000000000000000000000000000000000000000000000000000060648201526084016109ec565b6111878686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781528993509150879087908190840183828082843760009201919091525061237392505050565b6002602052600090815260409020805461133f906139e3565b80601f016020809104026020016040519081016040528092919081815260200182805461136b906139e3565b80156113b85780601f1061138d576101008083540402835291602001916113b8565b820191906000526020600020905b81548152906001019060200180831161139b57829003601f168201915b505050505081565b6113c86122ad565b610e8061279d565b6113d86122ad565b60085460408051918252602082018390527f0a653bb1a57e62cfd43f0dc557c7223e8b58896238b5f9b300ef646d37b82d1b910160405180910390a1600855565b61ffff811660009081526002602052604081208054606092919061143c906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054611468906139e3565b80156114b55780601f1061148a576101008083540402835291602001916114b5565b820191906000526020600020905b81548152906001019060200180831161149857829003601f168201915b50505050509050805160000361150d5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f726400000060448201526064016109ec565b610dd26000601483516115209190613bfa565b8391906127da565b6115306122ad565b81813060405160200161154593929190613c11565b60408051601f1981840301815291815261ffff8516600090815260026020908152919020825161157a9391929091019061310f565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce8383836040516115ae93929190613bad565b60405180910390a1505050565b6115c36122ad565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b9060200160405180910390a150565b6116446122ad565b600b5460405161ffff8084169216907fb17c58d5977290696b6eea77c81c725f3dc83e426252bd9ece6287c1b8d0e96890600090a3600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff92909216919091179055565b6116b66122ad565b6040517fcbed8b9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906117309088908890889088908890600401613c4a565b600060405180830381600087803b15801561174a57600080fd5b505af115801561175e573d6000803e3d6000fd5b505050505050505050565b61ffff8616600090815260066020526040808220905161178c9088908890613a30565b908152604080516020928190038301902067ffffffffffffffff8716600090815292529020549050806118275760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201527f616765000000000000000000000000000000000000000000000000000000000060648201526084016109ec565b808383604051611838929190613a30565b6040518091039020146118b35760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016109ec565b61ffff871660009081526006602052604080822090516118d69089908990613a30565b908152604080516020928190038301812067ffffffffffffffff8916600090815290845282902093909355601f8801829004820283018201905286825261196f918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061237392505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516119a6959493929190613c78565b60405180910390a150505050505050565b6119bf6122ad565b61ffff83811660008181526003602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac0906060016115ae565b611a296122ad565b61ffff83166000908152600260205260409020611a47908383613193565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516115ae93929190613bad565b611a836122ad565b6000611a9160026001613cb4565b90508060ff16825114611b585760405162461bcd60e51b815260206004820152606960248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a696e6960448201527f7469616c697a653a6e756d626572206f662074696d656c6f636b73205f73686f60648201527f756c64206d6174636820746865206e756d626572206f6620676f7665726e616e60848201527f636520726f75746573000000000000000000000000000000000000000000000060a482015260c4016109ec565b60005b8160ff168160ff161015611c8d57611b8e838260ff1681518110611b8157611b81613a40565b6020026020010151612902565b828160ff1681518110611ba357611ba3613a40565b60209081029190910181015160ff83166000818152600e845260409081902054905191825273ffffffffffffffffffffffffffffffffffffffff928316939216917ffc45ae51ac4893a3f843d030fbfd4037c0c196109c9e667645b8f144c83c16ea910160405180910390a3828160ff1681518110611c2457611c24613a40565b60209081029190910181015160ff83166000908152600e909252604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055600101611b5b565b505050565b611c9a6122ad565b73ffffffffffffffffffffffffffffffffffffffff8116611d235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109ec565b611d2c8161294f565b50565b6040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff808616600483015284166024820152306044820152606481018290526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90608401600060405180830381865afa158015611dd5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dfd9190810190613d29565b95945050505050565b611e0e6129c6565b6001611e1982610dd9565b6002811115611e2a57611e2a6135b3565b14611ec35760405162461bcd60e51b815260206004820152605360248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a65786560448201527f637574653a2070726f706f73616c2063616e206f6e6c7920626520657865637560648201527f7465642069662069742069732071756575656400000000000000000000000000608482015260a4016109ec565b6000818152600d602090815260408083206006810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179081905562010000900460ff168452600e90925280832054600183015460028401549251939473ffffffffffffffffffffffffffffffffffffffff9092169390929186917f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f9190a260005b81811015612099578373ffffffffffffffffffffffffffffffffffffffff16630825f38f866002018381548110611fa457611fa4613a40565b60009182526020909120015460038801805473ffffffffffffffffffffffffffffffffffffffff9092169185908110611fdf57611fdf613a40565b9060005260206000200154886004018581548110611fff57611fff613a40565b9060005260206000200189600501868154811061201e5761201e613a40565b90600052602060002001886040518663ffffffff1660e01b8152600401612049959493929190613b28565b6000604051808303816000875af1158015612068573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120909190810190613d29565b50600101611f6b565b5050505050611d2c6001600055565b6120b0612a1f565b600b546175309061ffff8681169116146121585760405162461bcd60e51b815260206004820152604860248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a5f626c60448201527f6f636b696e674c7a526563656976653a20696e76616c696420736f757263652060648201527f636861696e206964000000000000000000000000000000000000000000000000608482015260a4016109ec565b6000806121ea835a61216a9190613bfa565b60963073ffffffffffffffffffffffffffffffffffffffff166366ad5c8a8b8b8b8b60405160240161219f9493929190613d66565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e09390931b929092179091523093929150612a72565b9150915081610bb75760008480519060200120905080600660008a61ffff1661ffff168152602001908152602001600020886040516122299190613da5565b90815260408051918290036020908101832067ffffffffffffffff8b1660009081529152209190915561225d908890613da5565b60405180910390208861ffff167f41d73ce7be31a588d59fe9013cdcfe583bc0aab25093d042b64cade0df730656888560405161229b929190613dc1565b60405180910390a35050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109ec565b61231c612afd565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6000808280602001905181019061238a9190613de4565b915091506000806000806000868060200190518101906123aa9190613fb7565b60008b8152600d6020526040902054949950929750909550935091501561245f5760405162461bcd60e51b815260206004820152604660248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a5f6e6f60448201527f6e626c6f636b696e674c7a526563656976653a206475706c696361746520707260648201527f6f706f73616c0000000000000000000000000000000000000000000000000000608482015260a4016109ec565b83518551148015612471575082518551145b801561247e575081518551145b6125165760405162461bcd60e51b815260206004820152606060248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a5f6e6f60448201527f6e626c6f636b696e674c7a526563656976653a2070726f706f73616c2066756e60648201527f6374696f6e20696e666f726d6174696f6e206172697479206d69736d61746368608482015260a4016109ec565b61252260026001613cb4565b60ff168160ff16106125c25760405162461bcd60e51b815260206004820152604960248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a5f6e6f60448201527f6e626c6f636b696e674c7a526563656976653a20696e76616c69642070726f7060648201527f6f73616c20747970650000000000000000000000000000000000000000000000608482015260a4016109ec565b6125cc8551612b4f565b6040805161012081018252878152600060208083018281528385018a8152606085018a90526080850189905260a0850188905260c0850184905260e0850184905260ff87166101008601528b8452600d835294909220835181559151600183015592518051929384936126459260028501920190613207565b5060608201518051612661916003840191602090910190613281565b506080820151805161267d9160048401916020909101906132bb565b5060a08201518051612699916005840191602090910190613314565b5060c08201516006909101805460e08401516101009485015160ff1662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff9115159095027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff941515949094167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216919091179290921791909116919091179055600c87905580516040517fc37d19c9a6a9a568b5071658f9b5082ff8f142df3cf090385c5621ab119380659061277e908990899089908990899061412b565b60405180910390a261278f87612bdf565b505050505050505050505050565b6127a5612a1f565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123493390565b6060816127e881601f6141f5565b10156128365760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016109ec565b61284082846141f5565b845110156128905760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016109ec565b6060821580156128af57604051915060008252602082016040526128f9565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156128e85780518352602092830192016128d0565b5050858452601f01601f1916604052505b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff8116611d2c576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260005403612a185760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109ec565b6002600055565b60075460ff1615610e805760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016109ec565b6000606060008060008661ffff1667ffffffffffffffff811115612a9857612a98613623565b6040519080825280601f01601f191660200182016040528015612ac2576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115612ae4578692505b828152826000602083013e909890975095505050505050565b60075460ff16610e805760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016109ec565b600954600a544291906201518090612b679084613bfa565b1115612b795750600a81905581612b86565b612b8383826141f5565b90505b600854811115612bd85760405162461bcd60e51b815260206004820181905260248201527f4461696c79205472616e73616374696f6e204c696d697420457863656564656460448201526064016109ec565b6009555050565b6000818152600d60209081526040808320600681015462010000900460ff168452600e83528184205482517f6a42b8f8000000000000000000000000000000000000000000000000000000008152925191949373ffffffffffffffffffffffffffffffffffffffff90911692636a42b8f892600480830193928290030181865afa158015612c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c95919061420d565b612c9f90426141f5565b60018084018290556000858152600f602052604090819020805460ff191690921790915560068401546002850154915192935062010000900460ff169185907f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290612d0d9086815260200190565b60405180910390a260005b8181101561118757612ed5856002018281548110612d3857612d38613a40565b60009182526020909120015460038701805473ffffffffffffffffffffffffffffffffffffffff9092169184908110612d7357612d73613a40565b9060005260206000200154876004018481548110612d9357612d93613a40565b906000526020600020018054612da8906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054612dd4906139e3565b8015612e215780601f10612df657610100808354040283529160200191612e21565b820191906000526020600020905b815481529060010190602001808311612e0457829003601f168201915b5050505050886005018581548110612e3b57612e3b613a40565b906000526020600020018054612e50906139e3565b80601f0160208091040260200160405190810160405280929190818152602001828054612e7c906139e3565b8015612ec95780601f10612e9e57610100808354040283529160200191612ec9565b820191906000526020600020905b815481529060010190602001808311612eac57829003601f168201915b50505050508888612edd565b600101612d18565b60ff81166000908152600e602090815260409182902054915173ffffffffffffffffffffffffffffffffffffffff9092169163f2b0653791612f29918a918a918a918a918a9101614226565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612f5d91815260200190565b602060405180830381865afa158015612f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9e919061426d565b1561305d5760405162461bcd60e51b815260206004820152606360248201527f4f6d6e69636861696e476f7665726e616e63654578656375746f723a3a71756560448201527f75654f72526576657274496e7465726e616c3a206964656e746963616c20707260648201527f6f706f73616c20616374696f6e20616c7265616479207175657565642061742060848201527f657461000000000000000000000000000000000000000000000000000000000060a482015260c4016109ec565b60ff81166000908152600e6020526040908190205490517f3a66f90100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633a66f901906130cc9089908990899089908990600401614226565b6020604051808303816000875af11580156130eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb7919061420d565b82805461311b906139e3565b90600052602060002090601f01602090048101928261313d5760008555613183565b82601f1061315657805160ff1916838001178555613183565b82800160010185558215613183579182015b82811115613183578251825591602001919060010190613168565b5061318f92915061336d565b5090565b82805461319f906139e3565b90600052602060002090601f0160209004810192826131c15760008555613183565b82601f106131da5782800160ff19823516178555613183565b82800160010185558215613183579182015b828111156131835782358255916020019190600101906131ec565b828054828255906000526020600020908101928215613183579160200282015b8281111561318357825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190613227565b8280548282559060005260206000209081019282156131835791602002820182811115613183578251825591602001919060010190613168565b828054828255906000526020600020908101928215613308579160200282015b8281111561330857825180516132f891849160209091019061310f565b50916020019190600101906132db565b5061318f929150613382565b828054828255906000526020600020908101928215613361579160200282015b82811115613361578251805161335191849160209091019061310f565b5091602001919060010190613334565b5061318f92915061339f565b5b8082111561318f576000815560010161336e565b8082111561318f57600061339682826133bc565b50600101613382565b8082111561318f5760006133b382826133bc565b5060010161339f565b5080546133c8906139e3565b6000825580601f106133d8575050565b601f016020900490600052602060002090810190611d2c919061336d565b803561ffff8116811461340857600080fd5b919050565b60008083601f84011261341f57600080fd5b50813567ffffffffffffffff81111561343757600080fd5b60208301915083602082850101111561344f57600080fd5b9250929050565b803567ffffffffffffffff8116811461340857600080fd5b6000806000806000806080878903121561348757600080fd5b613490876133f6565b9550602087013567ffffffffffffffff808211156134ad57600080fd5b6134b98a838b0161340d565b90975095508591506134cd60408a01613456565b945060608901359150808211156134e357600080fd5b506134f089828a0161340d565b979a9699509497509295939492505050565b60006020828403121561351457600080fd5b5035919050565b60006020828403121561352d57600080fd5b610dd2826133f6565b6000806040838503121561354957600080fd5b613552836133f6565b946020939093013593505050565b60008060006040848603121561357557600080fd5b61357e846133f6565b9250602084013567ffffffffffffffff81111561359a57600080fd5b6135a68682870161340d565b9497909650939450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b602081016003831061361d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561367b5761367b613623565b604052919050565b600067ffffffffffffffff82111561369d5761369d613623565b50601f01601f191660200190565b6000806000606084860312156136c057600080fd5b6136c9846133f6565b9250602084013567ffffffffffffffff8111156136e557600080fd5b8401601f810186136136f657600080fd5b803561370961370482613683565b613652565b81815287602083850101111561371e57600080fd5b8160208401602083013760006020838301015280945050505061374360408501613456565b90509250925092565b60005b8381101561376757818101518382015260200161374f565b83811115613776576000848401525b50505050565b6000815180845261379481602086016020860161374c565b601f01601f19169290920160200192915050565b602081526000610dd2602083018461377c565b600080604083850312156137ce57600080fd5b6137d7836133f6565b91506137e5602084016133f6565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114611d2c57600080fd5b60006020828403121561382257600080fd5b8135610dd2816137ee565b60008060008060006080868803121561384557600080fd5b61384e866133f6565b945061385c602087016133f6565b935060408601359250606086013567ffffffffffffffff81111561387f57600080fd5b61388b8882890161340d565b969995985093965092949392505050565b6000806000606084860312156138b157600080fd5b6138ba846133f6565b92506138c8602085016133f6565b9150604084013590509250925092565b600067ffffffffffffffff8211156138f2576138f2613623565b5060051b60200190565b6000602080838503121561390f57600080fd5b823567ffffffffffffffff81111561392657600080fd5b8301601f8101851361393757600080fd5b8035613945613704826138d8565b81815260059190911b8201830190838101908783111561396457600080fd5b928401925b8284101561398b57833561397c816137ee565b82529284019290840190613969565b979650505050505050565b600080600080608085870312156139ac57600080fd5b6139b5856133f6565b93506139c3602086016133f6565b925060408501356139d3816137ee565b9396929550929360600135925050565b600181811c908216806139f757607f821691505b602082108103610e6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8054600090600181811c9080831680613a8957607f831692505b60208084108203613ac3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b838852818015613ada5760018114613aee57613b1c565b60ff198616828a0152604089019650613b1c565b876000528160002060005b86811015613b145781548b8201850152908501908301613af9565b8a0183019750505b50505050505092915050565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015260a060408201526000613b5d60a0830186613a6f565b8281036060840152613b6f8186613a6f565b9150508260808301529695505050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b61ffff84168152604060208201526000611dfd604083018486613b82565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015613c0c57613c0c613bcb565b500390565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b600061ffff80881683528087166020840152508460408301526080606083015261398b608083018486613b82565b61ffff86168152608060208201526000613c96608083018688613b82565b67ffffffffffffffff94909416604083015250606001529392505050565b600060ff821660ff84168060ff03821115613cd157613cd1613bcb565b019392505050565b6000613ce761370484613683565b9050828152838383011115613cfb57600080fd5b610dd283602083018461374c565b600082601f830112613d1a57600080fd5b610dd283835160208501613cd9565b600060208284031215613d3b57600080fd5b815167ffffffffffffffff811115613d5257600080fd5b613d5e84828501613d09565b949350505050565b61ffff85168152608060208201526000613d83608083018661377c565b67ffffffffffffffff85166040840152828103606084015261398b818561377c565b60008251613db781846020870161374c565b9190910192915050565b67ffffffffffffffff83168152604060208201526000613d5e604083018461377c565b60008060408385031215613df757600080fd5b825167ffffffffffffffff811115613e0e57600080fd5b613e1a85828601613d09565b925050602083015190509250929050565b600082601f830112613e3c57600080fd5b81516020613e4c613704836138d8565b82815260059290921b84018101918181019086841115613e6b57600080fd5b8286015b84811015613e865780518352918301918301613e6f565b509695505050505050565b600082601f830112613ea257600080fd5b81516020613eb2613704836138d8565b82815260059290921b84018101918181019086841115613ed157600080fd5b8286015b84811015613e8657805167ffffffffffffffff811115613ef55760008081fd5b8701603f81018913613f075760008081fd5b613f18898683015160408401613cd9565b845250918301918301613ed5565b600082601f830112613f3757600080fd5b81516020613f47613704836138d8565b82815260059290921b84018101918181019086841115613f6657600080fd5b8286015b84811015613e8657805167ffffffffffffffff811115613f8a5760008081fd5b613f988986838b0101613d09565b845250918301918301613f6a565b805160ff8116811461340857600080fd5b600080600080600060a08688031215613fcf57600080fd5b855167ffffffffffffffff80821115613fe757600080fd5b818801915088601f830112613ffb57600080fd5b8151602061400b613704836138d8565b82815260059290921b8401810191818101908c84111561402a57600080fd5b948201945b83861015614051578551614042816137ee565b8252948201949082019061402f565b918b015191995090935050508082111561406a57600080fd5b61407689838a01613e2b565b9550604088015191508082111561408c57600080fd5b61409889838a01613e91565b945060608801519150808211156140ae57600080fd5b506140bb88828901613f26565b9250506140ca60808701613fa6565b90509295509295909350565b600081518084526020808501808196508360051b8101915082860160005b8581101561411e57828403895261410c84835161377c565b988501989350908401906001016140f4565b5091979650505050505050565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561417a57815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101614148565b5050508381038285015287518082528883019183019060005b818110156141af57835183529284019291840191600101614193565b505084810360408601526141c381896140d6565b9250505082810360608401526141d981866140d6565b9150506141eb608083018460ff169052565b9695505050505050565b6000821982111561420857614208613bcb565b500190565b60006020828403121561421f57600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015260a06040820152600061425b60a083018661377c565b8281036060840152613b6f818661377c565b60006020828403121561427f57600080fd5b81518015158114610dd257600080fdfea26469706673582212205698dd623403fca20694b70f52ebceba4d631de80b182fa4e194d0c9ea19867164736f6c634300080d0033",
  "devdoc": {
    "custom:security-contact": "https://github.com/VenusProtocol/governance-contracts#discussion",
    "details": "The owner of this contract controls LayerZero configuration. When used in production the owner will be OmnichainExecutor This implementation is non-blocking, meaning the failed messages will not block the future messages from the source. For the blocking behavior, derive the contract from LzApp.",
    "kind": "dev",
    "methods": {
      "addTimelocks(address[])": {
        "custom:access": "Only owner.",
        "custom:event": "Emits TimelockAdded with old and new timelock and route type.",
        "params": {
          "timelocks_": "Array of addresses of all 3 timelocks."
        }
      },
      "cancel(uint256)": {
        "custom:access": "Sender must be the guardian.",
        "custom:event": "Emits ProposalCanceled with proposal id of the canceled proposal.",
        "params": {
          "proposalId_": "Id of proposal that is to be canceled."
        }
      },
      "execute(uint256)": {
        "custom:event": "Emits ProposalExecuted with proposal id of executed proposal.",
        "params": {
          "proposalId_": "Id of proposal that is to be executed."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "custom:access": "Only owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setMaxDailyReceiveLimit(uint256)": {
        "custom:access": "Only Owner.",
        "custom:event": "Emits SetMaxDailyReceiveLimit with old and new limit",
        "params": {
          "limit_": "Number of commands."
        }
      },
      "setSrcChainId(uint16)": {
        "custom:access": "Only owner.",
        "custom:event": "Emit SetSrcChainId with old and new source id.",
        "params": {
          "srcChainId_": "The new source chain id to be set."
        }
      },
      "state(uint256)": {
        "params": {
          "proposalId_": "The id of the proposal"
        },
        "returns": {
          "_0": "Proposal state"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "custom:access": "Only owner."
      }
    },
    "title": "OmnichainGovernanceExecutor",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidProposalId()": [
        {
          "notice": "Thrown when proposal ID is invalid."
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "events": {
      "ProposalCanceled(uint256)": {
        "notice": "Emitted when proposal is canceled."
      },
      "ProposalExecuted(uint256)": {
        "notice": "Emitted when proposal executed."
      },
      "ProposalQueued(uint256,uint256)": {
        "notice": "Emitted when proposal is queued."
      },
      "ProposalReceived(uint256,address[],uint256[],string[],bytes[],uint8)": {
        "notice": "Emitted when proposal is received."
      },
      "ReceivePayloadFailed(uint16,bytes,uint64,bytes)": {
        "notice": "Emitted when proposal failed."
      },
      "SetMaxDailyReceiveLimit(uint256,uint256)": {
        "notice": "Emitted when the maximum daily limit for receiving command from Binance chain is modified."
      },
      "SetSrcChainId(uint16,uint16)": {
        "notice": "Emitted when source layerzero endpoint id is updated."
      },
      "TimelockAdded(uint8,address,address)": {
        "notice": "Emitted when timelock added."
      }
    },
    "kind": "user",
    "methods": {
      "GUARDIAN()": {
        "notice": "A privileged role that can cancel any proposal."
      },
      "addTimelocks(address[])": {
        "notice": "Add timelocks to the ProposalTimelocks mapping."
      },
      "cancel(uint256)": {
        "notice": "Cancels a proposal only if sender is the guardian and proposal is not executed."
      },
      "execute(uint256)": {
        "notice": "Executes a queued proposal if eta has passed."
      },
      "last24HourCommandsReceived()": {
        "notice": "Total received commands within the last 24-hour window from Binance chain."
      },
      "last24HourReceiveWindowStart()": {
        "notice": "Timestamp when the last 24-hour window started from Binance chain."
      },
      "lastProposalReceived()": {
        "notice": "Last proposal count received."
      },
      "maxDailyReceiveLimit()": {
        "notice": "Maximum daily limit for receiving commands from Binance chain."
      },
      "pause()": {
        "notice": "Triggers the paused state of the controller."
      },
      "proposalTimelocks(uint256)": {
        "notice": "Mapping containing Timelock addresses for each proposal type."
      },
      "proposals(uint256)": {
        "notice": "The official record of all proposals ever proposed."
      },
      "queued(uint256)": {
        "notice": "Represents queue state of proposal."
      },
      "renounceOwnership()": {
        "notice": "Empty implementation of renounce ownership to avoid any mishappening."
      },
      "setMaxDailyReceiveLimit(uint256)": {
        "notice": "Sets the maximum daily limit for receiving commands."
      },
      "setSrcChainId(uint16)": {
        "notice": "Update source layerzero endpoint id."
      },
      "srcChainId()": {
        "notice": "Stores Binance layerzero endpoint id"
      },
      "state(uint256)": {
        "notice": "Gets the state of a proposal"
      },
      "unpause()": {
        "notice": "Triggers the resume state of the controller."
      }
    },
    "notice": "Executes the proposal transactions sent from the main chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1634,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1410,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 455,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 461,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 465,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 467,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "precrime",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 997,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "failedMessages",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 1533,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "_paused",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 1749,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "maxDailyReceiveLimit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1752,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "last24HourCommandsReceived",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1755,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "last24HourReceiveWindowStart",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1938,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "srcChainId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint16"
      },
      {
        "astId": 1941,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "lastProposalReceived",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1947,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "proposals",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Proposal)1928_storage)"
      },
      {
        "astId": 1953,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "proposalTimelocks",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_contract(ITimelock)2814)"
      },
      {
        "astId": 1958,
        "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
        "label": "queued",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ITimelock)2814": {
        "encoding": "inplace",
        "label": "contract ITimelock",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(ITimelock)2814)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract ITimelock)",
        "numberOfBytes": "32",
        "value": "t_contract(ITimelock)2814"
      },
      "t_mapping(t_uint256,t_struct(Proposal)1928_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OmnichainGovernanceExecutor.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)1928_storage"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)1928_storage": {
        "encoding": "inplace",
        "label": "struct OmnichainGovernanceExecutor.Proposal",
        "members": [
          {
            "astId": 1899,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1902,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "eta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1906,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "targets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1910,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "values",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1914,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "signatures",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 1918,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "calldatas",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 1921,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "canceled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 1924,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "executed",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 1927,
            "contract": "contracts/Cross-chain/OmnichainGovernanceExecutor.sol:OmnichainGovernanceExecutor",
            "label": "proposalType",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
